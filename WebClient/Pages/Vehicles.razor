@page "/vehicle"
@using System.Net
@using System.Net.Http.Headers
@using WebClient.Services
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@inject AuthService AuthService

<h3>Транспортные средства</h3>

@if (vehicles == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Year of manufacture</th>
            <th>Cost, $</th>
            <th>Color</th>
            <th>Milleage, km</th>
            <th>Transmision</th>
            <th>State</th>
            <th>Brand Name</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var vehicle in vehicles)
        {
            <tr @key="@vehicle.Id" @onclick="() => NavigateToVehicle(vehicle.Id)">
                <td>@vehicle.ManufactureYear</td>
                <td>@vehicle.Cost</td>
                <td>@vehicle.Color</td>
                <td>@vehicle.Mileage</td>
                <td>@vehicle.Transmission</td>
                <td>@vehicle.VehicleState</td>
                <td>@vehicle.BrandName</td>
                <td style="display: none">@vehicle.BrandId</td>
                <td><button @onclick="() => Remove(vehicle.Id)" @onclick:stopPropagation="true">REMOVE</button></td>
            </tr>
        }
        </tbody>
    </table>
    <button @onclick="() => NavigateToVehicle(0)" @onclick:stopPropagation="true">Create New</button>
}

@code {
    private List<VehicleDto> vehicles;

    protected override async Task OnInitializedAsync()
    {
        var uri = new Uri(NavigationManager.Uri);
        var accessTokenFromQueryString = uri.Query
            .Split(new[] { '?', '&' }, StringSplitOptions.RemoveEmptyEntries)
            .FirstOrDefault(x => x.StartsWith("accessToken="));

        if (string.IsNullOrEmpty(accessTokenFromQueryString) && !IsAccessTokenAdded())
        {
            AuthService.HandleUnauthorized();
            return;
        }

        if (!string.IsNullOrEmpty(accessTokenFromQueryString))
        {
            accessTokenFromQueryString = accessTokenFromQueryString.Replace("accessToken=", "");
            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", accessTokenFromQueryString);
        }
        
        try
        {
            vehicles = new List<VehicleDto>();
            vehicles = (await Http.GetFromJsonAsync<VehicleDto[]>("vehicle")).ToList();
        }
        catch (Exception ex)
        {
            AuthService.HandleUnauthorized();
        }
    }
    
    bool IsAccessTokenAdded()
    {
        var authorizationHeader = Http.DefaultRequestHeaders.Authorization;
        return authorizationHeader is {Scheme: "Bearer" };
    }
    private void NavigateToVehicle(long? id)
    {
        NavigationManager.NavigateTo($"/vehicle/{id}");
    }

    private async Task Remove(long id)
    {
        var response = await Http.DeleteAsync("vehicle/" + id);
        // bool deleteResponse = await response.Content.ReadFromJsonAsync<bool>();
        if (response.IsSuccessStatusCode)
        {
            await JsRuntime.InvokeVoidAsync("alert", "Deleted Successfully!");
            vehicles = (await Http.GetFromJsonAsync<VehicleDto[]>("vehicle")).ToList();
        }
        
        NavigationManager.NavigateTo("vehicle");
    }

}