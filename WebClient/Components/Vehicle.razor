@page "/vehicle/{id:long}"
@page "/vehicle/{id:long}/{enterpriseId:long}"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime

<EditForm Model="@vehicle" OnSubmit="Save">
    <p>
        Manufacture Year:<br/>
        <InputNumber id="year" @bind-Value="@vehicle.ManufactureYear"/>
    </p>
    <p>
        Cost:<br/>
        <InputNumber id="cost" @bind-Value="@vehicle.Cost"/>
    </p>
    <p>
        Color:<br/>
        <InputText id="color" @bind-Value="@vehicle.Color"/>
    </p>
    <p>
        Mileage:<br/>
        <InputNumber id="mileage" @bind-Value="@vehicle.Mileage"/>
    </p>
    <p>
        On vehicle:<br/>
        <InputText id="onvehicle" @bind-Value="@activeDriver.Name"/>
    </p>
    <p>
        Free drivers:<br/>
        <InputSelect name="FreeDriverId" @bind-Value="@drivers">
            @foreach (var driver in drivers)
            {
                <option value="@driver.Id">@driver.Name</option>
            }
        </InputSelect>
    </p>
    <p>
        Brand:<br/>
        <InputSelect name="BrandId" @bind-Value="@vehicle.BrandId">
            @foreach (var brand in brands)
            {
                <option value="@brand.Id">@brand.Name</option>
            }
        </InputSelect>
    </p>
    <p>
        Transmission:<br/>
        <InputSelect @bind-Value="@vehicle.Transmission">
            @foreach (var value in Enum.GetValues(typeof(Transmission)))
            {
                <option value="@value">@value.ToString()</option>
            }
        </InputSelect>
    </p>
    <p>
        Vehicle State:<br/>
        <InputSelect @bind-Value="@vehicle.VehicleState">
            @foreach (var value in Enum.GetValues(typeof(VehicleState)))
            {
                <option value="@value">@value.ToString()</option>
            }
        </InputSelect>
    </p>
    <div class="row">
        <div class="col-md-4">
            <div class="form-group">
                <button type="submit">Submit</button>
                <input type="button" class="btn" @onclick="@Cancel" value="Cancel" />
            </div>
        </div>
    </div>
    
</EditForm>
 
@code {
    [Parameter]
    public long? Id { get; set; }
    
    [Parameter]
    public long? EnterpriseId { get; set; }
    
    VehicleDto vehicle = new();

    List<BrandSimpleDto> brands = new();

    List<DriverSimpleDto> drivers = new();

    DriverSimpleDto activeDriver { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        if (Id != 0)
        {
            vehicle = await Http.GetFromJsonAsync<VehicleDto>("vehicle/" + Id);            
        }

        if (EnterpriseId.HasValue)
            vehicle.Enterprise = EnterpriseId.Value;
        
        brands = await Http.GetFromJsonAsync<List<BrandSimpleDto>>("vehicle/brand");

        if (vehicle.ActiveDriver != null)`
            activeDriver = await Http.GetFromJsonAsync<DriverSimpleDto>($"driver/" + vehicle.ActiveDriver.Value);

        var driverList = string.Join(",", vehicle.Drivers);
        drivers = await Http.GetFromJsonAsync<List<DriverSimpleDto>>($"driver/freelist?ids={driverList}");
    }

    private async Task Save()
    {
        HttpResponseMessage response;
        if (vehicle.BrandId == 0)
            vehicle.BrandId = brands.FirstOrDefault()?.Id ?? 0;
        
        if (Id != 0)
            response = await Http.PutAsJsonAsync("vehicle", vehicle);
        else
            response = await Http.PostAsJsonAsync("vehicle", vehicle);
        
        if (response.IsSuccessStatusCode)
        {
            await JsRuntime.InvokeVoidAsync("alert", "Updated Successfully!");
            NavigationManager.NavigateTo("vehicle");
        }
    }
    void Cancel()
    {
        NavigationManager.NavigateTo("vehicle");
    }
}